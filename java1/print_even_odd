package org.example;

class NumberPrinter {
    private int number = 1;
    private final int MAX = 20;

    public synchronized void printOdd() throws InterruptedException {
        while (number <= MAX) {
            if (number % 2 == 0) {
                wait(); // wait if it's not odd's turn
            } else {
                System.out.println(Thread.currentThread().getName() + number++);
                notify(); // wake up even thread
            }
        }
    }

    public synchronized void printEven() throws InterruptedException {
        while (number <= MAX) {
            if (number % 2 == 1) {
                wait(); // wait if it's not even's turn
            } else {
                System.out.println(Thread.currentThread().getName() + number++);
                notify(); // wake up odd thread
            }
        }
    }
}

class Main {
    public static void main(String[] args) {
        NumberPrinter printer = new NumberPrinter();

        Thread oddThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {

                    printer.printOdd();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }, "Thread Odd");

        Thread evenThread = new Thread(() -> {
            try {

                printer.printEven();
            } catch (InterruptedException e) { e.printStackTrace(); }
        }, "Thread Even");

        oddThread.start();
        evenThread.start();
    }
}


or


class NumberPrinter {
    private int number = 1;
    private final int MAX = 20;

    public synchronized void printOdd() throws InterruptedException {
        while (number <= MAX) {
            if (number % 2 == 0) {
                wait(); // wait if it's not odd's turn
            } else {
                System.out.println("Odd: " + number++);
                notify(); // wake up even thread
            }
        }
    }

    public synchronized void printEven() throws InterruptedException {
        while (number <= MAX) {
            if (number % 2 == 1) {
                wait(); // wait if it's not even's turn
            } else {
                System.out.println("Even: " + number++);
                notify(); // wake up odd thread
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        NumberPrinter printer = new NumberPrinter();

        Thread oddThread = new Thread(new Runnable() {

    @Override
    public void run() {
        try {
            printer.printOdd();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
});

        Thread evenThread = new Thread(() -> {
            try {
                printer.printEven();
            } catch (InterruptedException e) { e.printStackTrace(); }
        });

        oddThread.start();
        evenThread.start();
    }
}



or


class NumberPrinter {
    private int number = 1;
    private final int MAX = 10;
    private final Object lock = new Object();

    public void printOdd() {
        synchronized (lock) {
            while (number <= MAX) {
                if (number % 2 == 0) {
                    try {
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                } else {
                    System.out.println(Thread.currentThread().getName() + " - " + number);
                    number++;
                    lock.notify();
                }
            }
        }
    }

    public void printEven() {
        synchronized (lock) {
            while (number <= MAX) {
                if (number % 2 != 0) {
                    try {
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                } else {
                    System.out.println(Thread.currentThread().getName() + " - " + number);
                    number++;
                    lock.notify();
                }
            }
        }
    }
}

public class OddEvenThreads {
    public static void main(String[] args) {
        NumberPrinter printer = new NumberPrinter();

        Thread oddThread = new Thread(printer::printOdd, "Odd-Thread");
        Thread evenThread = new Thread(printer::printEven, "Even-Thread");

        oddThread.start();
        evenThread.start();
    }
}


or




