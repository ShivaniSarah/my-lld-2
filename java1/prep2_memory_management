Q. memory management in java and allocation of integers , real numbers and string and how they are used in run time ? tell for modern java ?


Ans.

Refer: https://www.geeksforgeeks.org/java-memory-management/


In modern Java (Java 17+), memory management and the runtime handling of data types like integers,
real numbers (floating-point), and strings follow certain principles largely governed by the Java Virtual Machine (JVM). 
Here's a comprehensive breakdown:

🔷 1. Memory Management in Java
Java handles memory automatically, using:

➤ Heap Memory
Stores objects, including Integer, Double, String, custom classes, etc.

Managed by the Garbage Collector (GC).

Divided into:

Young Generation (short-lived objects)

Old Generation (long-lived objects)

➤ Metaspace (class metadata)
Stores class level lookup table constant pool and method bytecode

➤ Stack Memory
Stores primitive values and references to objects.

Method calls, local variables, and function call chains live here.
In Java, Stack memory is used to store local variables, method calls and references to an object. 
Each time a method is called, a new stack frame is created to hold local variables and object references. 
The stack memory is managed automatically, when a method finishes the stack frame is removed and the space used by its local variable
is also released.

Note:

Stack memory stores references to objects not the object themselves
Each thread in Java application has its own stack.

➤ Registers 
Program Counter points to the current execution step

➤ Native Heap
Handled internally by the JVM and native code, rarely user-controlled.

🔷 2. Primitive vs. Wrapper Types

Type	                 Memory Location	                              Usage
int, float, double	     Stack (if local), Heap (if inside objects)	      Primitive types
Integer, Double	         Heap (Boxed objects)	                          Wrapper objects (immutable only)
String	                 Heap + String pool	                              Immutable object

🔷 3. Allocation and Use at Runtime

✅ Integers (int, Integer)

int is a primitive: 4 bytes (32 bits), stored in stack if local.
int a = 10;

Integer is a wrapper class for the primitive type int.
It is an immutable object (like String).

Created using:

Integer x = Integer.valueOf(42);  // preferred
Integer y = new Integer(42);      // discouraged (always creates new object)

Integer is an object, stored in heap, with some caching for small values (-128 to 127).
Integer b = 10; // uses Integer.valueOf() internally, uses cache

Autoboxing:
Integer b = 10; // converts int to Integer

Unboxing:
int c = b; // converts Integer to int


✅ Real Numbers (float, double)

float (32-bit), double (64-bit): primitive types.
Default real number in Java is double.
double d = 3.14;
Float fObj = 3.14f; // autoboxing to Float

Like int, used in stack or heap depending on context.

✅ String

Refer: https://www.geeksforgeeks.org/string-constant-pool-in-java/

String is a reference type, stored on the heap.
Immutable: any modification creates a new object.

String Constant / Literal pool (interning):
Java maintains a pool of unique strings in memory.

Example:

String s1 = "hello"; // uses string pool
String s2 = new String("hello"); // new object on heap
String s3 = "hello";
System.out.println((s1==s2)+" "+ (s1==s3));    // false true


class Main {
    public static void main(String[] args) {
        String s1 = "hello"; // uses string pool
        StringBuilder s2 = new StringBuilder("hello"); // new object on heap
        String s3 = "hello";
        System.out.println((s1==s2.toString())+" "+ (s1==s3));  // false true
    }
}


Runtime usage:
Strings used often in method calls, logging, I/O, etc.

Heavy use of StringBuilder or StringBuffer for efficiency when mutating.

🔷 4. Garbage Collection (GC)

Unused objects are cleaned up automatically.

Modern JVM uses G1 GC, ZGC, or Shenandoah for low-pause GC.

Efficient memory management helps prevent leaks and improve performance.

🔷 5. Escape Analysis and Scalar Replacement (Modern JVM Optimization)

Escape analysis detects if an object can be allocated on the stack instead of heap.

Scalar replacement breaks an object into its primitive fields for optimization.

These are done at runtime by JIT compiler, reducing memory pressure.

🔷 Summary Table

Data Type        |   	Stored In	       |  Heap or Stack          |  	Mutable	          |  GC Tracked
--------------------------------------------------------------------------------------------------------
int, double	     |    Primitive	       |  Stack (or in object heap)	 |      Yes        	      |    No
Integer, Double  | 	  Object           |	Heap	                 |      No(Immutable)	  |    Yes
String	         |    Object           |  Heap + Pool	             |      No	              |    Yes

🔷 Best Practices

Use primitives when possible to avoid GC overhead.

Use StringBuilder for concatenations in loops.

Avoid new String("...") — prefer string literals.

Be aware of autoboxing in performance-critical code.


--------------------------------------------------------------------------------------------------------




🔷 What Is Integer Caching?
Java caches Integer objects in the range -128 to 127 for performance and memory efficiency.

This means:

If you call Integer.valueOf(42) multiple times, it returns the same object for values in the cache range.

If you create a number outside the range, like Integer.valueOf(200), Java creates a new object.

This is done internally in the Integer class like this:

public static Integer valueOf(int i) {
    if (i >= -128 && i <= 127)
        return IntegerCache.cache[i + 128];
    else
        return new Integer(i);
}

🔷 Integer Pool (IntegerCache)
✅ Internals:

Java uses a static array called IntegerCache.cache which holds pre-created Integer objects from -128 to 127.

This is initialized during JVM startup.

✅ Why -128 to 127?
This range is chosen because:

It's frequently used (loop indices, small constants).

Fits in 1 signed byte (byte ranges from -128 to 127).

✅ Example:

Integer a = Integer.valueOf(100); 
Integer b = Integer.valueOf(100);
Integer c = 100;
System.out.println(a == b); // true (from cache)
System.out.println(a == c); // true (from cache)

Integer x = Integer.valueOf(200);
Integer y = Integer.valueOf(200);
System.out.println(x == y); // false (new objects)

⚠️ Note: == compares object references, not values. For values, always use .equals():

System.out.println(x.equals(y)); // true


Yes, the Integer pool (i.e., the cached Integer objects from -128 to 127) resides in the heap memory -> old generation

The cached Integer objects are:

Allocated once when the class is first loaded.

Treated as long-lived objects.

Therefore, they usually reside in the Old Generation (Tenured Heap) area of the heap.

The class that is loaded and triggers the creation of the Integer cache is the java.lang.Integer class itself.
It is loaded by the Bootstrap ClassLoader very early in the JVM lifecycle.



--------------------------------------------------------------------------------------------------------
 


🔷 Java Heap Structure (Simplified)
The Java Heap is divided into two main regions:

1. Young Generation (Young Gen / Nursery)
Divided into:

Eden space: where new objects are first allocated.

Survivor spaces (S0 and S1): hold objects that survived GC from Eden.

Garbage collection here is called a minor GC.

Fast and frequent.

2. Old Generation (Tenured Gen)
Holds long-lived objects.

Garbage collection here is called a major GC (or full GC).

Slower, less frequent, may cause pause if not using low-pause collectors like G1, ZGC, Shenandoah.

🔷 How JVM Decides: Young vs. Old Generation
✅ Object Allocation Rules (simplified)
New objects are typically created in Eden (Young Gen).

If the object survives a few minor GCs, it's considered long-lived and is promoted to Old Generation.

Large objects (e.g., big arrays or strings) may go directly to Old Gen, depending on:

-XX:PretenureSizeThreshold

GC algorithm (e.g., G1 GC may behave differently than Parallel GC)

✅ Object Tenuring Threshold
Controlled by -XX:MaxTenuringThreshold (default: usually 15).

If an object survives N minor GCs, it is tenured (promoted) to Old Generation.

🔷 Does GC Only Work in Young Generation?
No — GC works in both Young and Old generations, but the frequency and mechanisms differ:

✅ Minor GC (Young Gen collection)
Fast and frequent.

Copies surviving objects from Eden → Survivor spaces.

Eventually promotes long-living objects to Old Gen.

Minimal pause time.

✅ Major GC / Full GC (Old Gen collection)
Occurs when Old Gen is full or explicitly triggered.

Slower and can pause the entire application (Stop-the-World).

Collects garbage in both Old and Young generations (if it's a full GC).

✅ Modern GCs like G1, ZGC, and Shenandoah:
Try to avoid Stop-the-World events.

Perform incremental or concurrent compaction of Old Gen.

More sophisticated in how they manage regions (not just Eden/S0/S1).


The finalize() method in Java is a protected, non-static method of the java.lang.Object class, which is the superclass of all Java classes. It is called by the garbage collector on an object when the garbage collector determines that there are no more references to the object. This provides a final opportunity for the object to perform cleanup actions before it is garbage collected. 
To use the finalize() method, it must be overridden in a subclass. The method has the following signature:
Java

protected void finalize() throws Throwable {
    // Cleanup code here
}

--------------------------------------------------------------------------------------------------------


🔷 1. Static Methods and Class Metadata
✅ Stored in: Metaspace
Static methods, method bytecode, field descriptors, and other class-level metadata are stored in Metaspace, not the heap.

Metaspace is the replacement for PermGen (which existed before Java 8).

It is managed outside the heap but still within JVM-managed memory.

🔷 2. Static Variables (Fields)
✅ Stored in: Heap (usually Old Generation)
Static variables are part of the Class object that the JVM loads.

The Class object itself is allocated on the heap (not Metaspace).

Therefore, the actual values of static fields live in the heap.

How it works:
When a class is loaded, the JVM:

Loads class metadata into Metaspace.

Creates a Class object (an instance of java.lang.Class) on the heap.

Static fields are fields in this Class object and stored in heap memory.

🧠 Note: The Class object typically stays in the Old Generation, since it's long-lived.





--------------------------------------------------------------------------------------------------------





✅ What Is in the Constant Pool?
The constant pool is not the place where variable names or Java variable values live directly.
Instead, it contains symbolic references and literal constants needed by the class at runtime.

📌 Specifically, the constant pool holds:
String literals
→ "Hello", "abc", etc. (symbolically)

Primitive constants
→ 42, 3.14, true

Class and interface names
→ "java/lang/String", "com/example/MyClass"

Field names and descriptors
→ "count", "I" (for int)

Method names and descriptors
→ "valueOf", "()Ljava/lang/Integer;"

Method handles and bootstrap methods (for lambdas, invokedynamic, etc.)

🔸 These are symbolic references that the JVM resolves when needed (lazy resolution).

❌ What is not in the constant pool?
Java variable names (like int myVar = 5;) — these are removed by the compiler.

Instance variable values — those go on the heap as part of the object.

Static variable values — stored in the Class object on the heap.

Method bodies (bytecode) — stored in Metaspace, not in the constant pool.

🔍 Let’s see with an example:

public class Example {
    static final int X = 10;
    static final String S = "hello";
    
    public void greet() {
        System.out.println(S);
    }
}

🔷 At compile-time:
The compiler puts:

The literal "hello" in the constant pool.

The constant 10 may also go into the pool if it's inlined.

References like System.out, println, and method descriptors also go into the constant pool.

🔧 Using javap -v Example.class shows entries like:

#1 = Methodref          #6.#17     // java/lang/Object."<init>":()V
#2 = String             #18        // hello
#3 = Fieldref           #19.#20    // java/lang/System.out:Ljava/io/PrintStream;
#4 = Methodref          #21.#22    // java/io/PrintStream.println:(Ljava/lang/String;)V
🧠 So in short:
Constant pool ≠ Java variables

It's more like a symbol table that holds constants and symbolic references used by the class.

Think of it as the JVM’s “lookup table” during class loading and method execution.

The constant pool is not the same as the String pool or Integer pool in the heap.

Let’s clearly separate these three concepts — they are often confused, but they serve very different roles 
and exist in different memory areas:

🔷 1. Constant Pool (Class Constant Pool)
Feature	             Description
Lives in	         Metaspace (part of class metadata)
Created by	         The Java compiler (javac)
Used by	             JVM during class loading and execution
Contains	         Symbolic references to:

String literals ("abc")

Integer literals (100)

Class names, method names, field names

Descriptors like ()I, Ljava/lang/String; |
| Accessed by | JVM instructions like ldc, getstatic, invokevirtual |

🔍 Think of it as a symbol table for each .class file that is used by the JVM to resolve fields, methods, and constants.

🔷 2. String Pool (Intern Pool)
Feature	                     Description
Lives in	                 Heap (usually Old Generation)
Managed by	                 JVM, through String.intern() or string literals
Used for	                 String deduplication and memory efficiency
Populated when	             A string literal appears (like "hello"), or intern() is explicitly called
Shared across classes	     ✅ Yes, global within the JVM

🔍 Two string literals like "abc" and "abc" point to the same object in the String pool.

String a = "abc";
String b = "abc";
System.out.println(a == b); // true (both point to pooled string)

🔷 3. Integer Cache (a.k.a. Integer Pool)
Feature	                   Description
Lives in	               Heap (usually Old Generation)
Managed by	               Integer class (IntegerCache internal class)
Range	                   By default: -128 to 127 (can be extended via JVM flag)
Used for	               Avoiding unnecessary boxing overhead for small values
Applies to	               Integer.valueOf(...), autoboxing of int literals

Integer a = 100;
Integer b = 100;
System.out.println(a == b); // true (from Integer cache)

Integer c = 1000;
Integer d = 1000;
System.out.println(c == d); // false (new objects)

✅ Summary: Memory Location & Purpose

Pool Type	         Lives In	      Purpose	                                             Shared Across Classes?
Constant Pool	     Metaspace	      Symbolic references & literals in class bytecode	     No (per class)
String Pool	          Heap	          Reuse of identical String instances	                 ✅ Yes
Integer Pool	      Heap	          Caching boxed Integer objects for performance	         ✅ Yes

Let me know if you'd like to inspect these in memory using tools like jcmd, jmap, or javap, or
if you want an internal code walkthrough (e.g., how IntegerCache works).


--------------------------------------------------------------------------------------------------------

Refer: https://www.geeksforgeeks.org/garbage-collection-java/
https://www.geeksforgeeks.org/types-of-jvm-garbage-collectors-in-java-with-implementation-details/

The Garbage collector in Java automatically removes the unused objects that are no longer needed. It runs in the background to free up memory.
In Java, The garbage collector is responsible for reclaiming memory by destroying objects that are no longer in use. When an object becomes unreachable that means no active reference points to it, it then becomes eligible for garbage collector. The garbage collector removes those objects freeing up the memory in the heap.
Garbage collector finds objects that are no longer needed by the program.
It removes those unused objects to free up the memory and making space for new objects.
New objects are collected more frequently than older objects, which helps improve efficiency.
You can request garbage collection using System.gc(), but the JVM ultimately decides when it should run.
Note:System.gc() and Runtime.gc() are the methods which requests for Garbage collection to JVM explicitly but it doesn’t ensures garbage collection as the final decision of garbage collection is of JVM only.

Types of Garbage Collectors
Serial Garbage Collector: It is the simplest type of garbage collector. It uses a single thread to handle all garbage collection tasks.
Parallel Garbage Collector: It is the default garbage collector in Java 8. It uses multiple threads to perform garbage collection tasks.
Concurrent Mark-Sweep Collector: It is designed to minimize pause times by doing most of its work while the application is still running. It uses multiple threads to mark and clean up unreachable objects.
G1 Garbage Collector: It was introduced in JDK 7 and became the default garbage collector in Java 9. Designed for applications with large heap sizes (greater than 4GB).
Z Garbage Collector: It is designed to handle large heaps with minimal pause times, typically in the range of milliseconds.
Shenandoah Garbage Collector: It is another low-pause-time garbage collector introduced in Java 12.


✅ Does Garbage Collection (GC) Apply to These Areas?
Memory Area	     Is GC Applied?	     Explanation
Heap	         ✅ Yes	              The primary target of GC — where all Java objects (instances, arrays, interned strings, etc.) live. Divided into Young Gen, Old Gen, and Eden/Survivor spaces.
Metaspace	     ✅ Partially	      Metaspace stores class metadata. Class unloading is rare, but possible — and GC can reclaim unreferenced class metadata.
Stack	        ❌ No	              The JVM stack is managed per thread. When a method finishes, its stack frame is popped. No garbage collection is needed — it's cleaned up automatically.

🔷 More Details:

1. Heap GC (Fully GC-managed)

Applies to:

All regular objects (e.g., new String(), new ArrayList<>())

Static variable values (stored in class objects in the heap)

Interned Strings (from the String pool, in heap)

Autoboxed primitives (e.g., Integer, Double — unless cached)

GC handles both Young and Old generations.

2. Metaspace GC (Class Metadata Collection)

Metaspace stores:

Class names

Method and field signatures

Constant pools (not values, but symbolic references)

GC can reclaim Metaspace when:

Class unloading happens

Class loaders become unreachable

Example:

In container-based apps (e.g., Tomcat), if you redeploy a webapp with a custom classloader, the old classloader and its classes can be GC'd — freeing up Metaspace.

🔹 This is not frequent unless you dynamically load/unload classes often.

3. Stack (Not GC'd)

Each thread has its own stack.

Method calls create stack frames (with local variables, return addresses, etc.)

Once a method exits, its frame is automatically discarded.

No GC involved — it's deterministic and fast.

🧠 In Summary:

Memory Area	       GC Applied?	      Managed by	                         Cleared When?
Heap	           ✅ Yes	          Garbage Collector	                     When no strong references
Metaspace          ✅ Yes             (limited)GC (for class metadata)	     When class/unloader is unreachable
Stack	           ❌ No	          JVM (per thread)	                     When method exits or thread dies


--------------------------------------------------------------------------------------------------------


https://www.geeksforgeeks.org/how-to-prevent-objects-of-a-class-from-garbage-collection-in-java/


The garbage collector in Java is automatic, i.e the user doesn't have to manually free an occupied memory which was dynamically allocated. And how does a garbage collector decide which object is to be deleted? It's simple: the object which loses it's reference, is marked for deletion from the heap memory. For example, look at the following piece of code:

// Java code to demonstrate when an object would
// be deleted by the garbage collector

class A {
    void f()
    {
        A x = new A(); /*object created locally
              It's scope remains valid till the
              termination of this function*/
    }
    public static void main(String a[])
    {
        f();

        /* function f() terminates, 
           and hence the object 'x' 
           too gets collected 
           by the garbage collector*/
    }
}
The above code shows that the reference variable 'x' had a scope limited to the function 'f()'. Therefore, after the termination of the mentioned function, the variable too has no recognition. Therefore, the object created loses it's reference, and hence, is collected by the garbage collector. The objects that are collected by the garbage collector, are collected so as to free the heap memory, where dynamic memory is allocated. The following diagram explains the different memory segments in a Java program, and their uses:

By Increasing Heap Memory

By using Singleton Class

Using public void finalise()



public class Singleton {

    /* static class member which 
       will store the object reference*/
    private static Singleton uniqueInstance;

    private Singleton()
    {
    }

    public static synchronized Singleton getInstance()
    {
        if (uniqueInstance == null) {
            uniqueInstance = new Singleton();
        }
        return uniqInstance;
    }
}
The above example shows that since the object's reference has been passed into a static variable, 
it will never be lost. Therefore, the object won't be deleted until the end of the program.
However, the only issue remains that only one object can be created here.


// Java code to demonstrate how to prevent garbage collection
// of an object using finalize method
class A {
    static A y;
    void f()
    {
        A x = new A();
    }
    pubic void finalize()
    {
        y = this; // Putting the reference id
        // of the current object
        // into the static variable y

        System.out.println("Object reference saved. The object
              won't be collected by the garbage collector");
    }
    public static void main(String a[])
    {
        f(); // function called
    }

As explained previously, finalize is the last method that is executed on an object.
In the above program, the function 'f()' creates a local object of class A. When the call of the function terminates,
the scope of the variable 'x' terminates as well, and hence, is marked for collection by the garbage collector.
However, before the garbage collector could delete the object, finalize runs. Inside the body of the method 'finalize',
one can see that the static member of class A, 'y', is assigned the reference id of the current object.
As a result, the reference id of the object to be deleted is preserved, and hence, the object is not deleted.
However, it is really important to know that making an object undeletable is risky, and increases the chances of memory leaks. 
Therefore, it is not advisable to do so.


--------------------------------------------------------------------------------------------------------




🔍 What Is a Memory Leak in Java?
In Java, memory leaks happen when your application unintentionally keeps references to objects that are no longer needed. Because the Garbage Collector (GC) can only collect objects that are unreachable, these still-referenced objects stay in memory forever, even though your program no longer uses them.

Over time, this leads to increased memory usage, slower performance, or even OutOfMemoryError.

🧠 Why Can Memory Leaks Still Happen Despite GC?
Garbage Collection only clears objects that are no longer reachable by any active references. If your code accidentally keeps a reference, the GC assumes you still want the object and does not clean it up — that's where the leak happens.

⚠️ Common Causes of Memory Leaks
1. Static Collections or Fields
If you use a static field to store objects, it lives for the lifetime of the application. If you forget to clear the field or remove old data, those objects will stay in memory forever.


public class Leaky {
    private static final List<Object> cache = new ArrayList<>();

    public void add(Object obj) {
        cache.add(obj); // Will never be removed unless explicitly cleared
    }
}

2. Listeners or Callbacks Not Removed
If you register a GUI listener or an event handler and forget to unregister it, it can prevent your objects from being garbage collected.
Unclosed resources	like Failing to close streams, sockets, DB connections,	FileInputStream, Connection

button.addActionListener(someListener); // not removed later
3. Long-lived Collections (Maps, Lists)
Storing objects in a cache or collection but not managing size or cleanup properly can cause them to accumulate endlessly.

4. Inner Classes Holding Outer Class References
Non-static inner classes hold a reference to their outer class. If the inner class lives longer (like in threads), the outer class is also stuck in memory.

public class Outer {
    class Inner {
        // holds implicit reference to Outer
    }
}
5. ThreadLocal Misuse
ThreadLocals are useful but dangerous if you don’t call remove() after you're done. They stay attached to the thread as long as it lives.

ThreadLocal<MyData> threadLocal = new ThreadLocal<>();
threadLocal.set(new MyData()); // if not removed, leaks memory

6. ClassLoaders in Dynamic Environments
In applications like Tomcat or Spring Boot, classloaders may not be garbage collected unless all references are cleaned up. This happens when you redeploy a web application and old classes don’t get unloaded.

🔬 How Do You Detect Memory Leaks?
Use profiling or heap dump analysis tools. Some popular ones are:

VisualVM – A free profiler included with most JDKs.

Eclipse MAT (Memory Analyzer Tool) – Great for analyzing .hprof files (heap dumps).

JProfiler, YourKit – Powerful commercial tools for deep memory analysis.

jcmd, jmap, JConsole – Command-line or GUI tools that give memory usage snapshots.

These tools help you find:

Which objects are using the most memory.

Which references are keeping them alive.

How many unreachable but uncollected objects are piling up.

✅ How to Prevent Memory Leaks
Use try-with-resources to close files, sockets, DB connections.

Unregister listeners and event handlers when done.

Use WeakHashMap or WeakReference for caches and large objects.

Clean up ThreadLocal values manually with remove().

For long-lived applications, monitor memory regularly using tools mentioned above.

Would you like to see a real example of how a Java app can leak memory and then debug it using VisualVM or Eclipse MAT?



--------------------------------------------------------------------------------------------------------


Here’s a checklist of everything important and useful — beyond what you already asked. If you're aiming for deep mastery, these are the areas you may still want to explore:

🔷 1. JVM Memory Regions in Depth
You've seen:

Heap (Young Gen, Old Gen)

Stack

Metaspace

But also worth knowing:

Code Cache – Stores JIT-compiled native code.

Direct Memory – Off-heap memory (e.g., used by ByteBuffer.allocateDirect()).

TLABs (Thread-Local Allocation Buffers) – Small allocation spaces per thread in the young gen for fast object creation.

🔷 2. Escape Analysis
Modern JVMs (HotSpot) analyze if an object escapes the method.

If not, JVM can allocate it on the stack or eliminate it altogether (scalar replacement).

Helps reduce GC overhead.

Related JVM flags: -XX:+DoEscapeAnalysis, -XX:+EliminateAllocations

🔷 3. JVM GC Algorithms
Understanding how different GC implementations behave is critical:

Serial GC: Simple, for small heaps and single-threaded.

Parallel GC: Throughput-focused, multi-threaded.

CMS (Concurrent Mark Sweep): Low pause, deprecated in Java 9+.

G1 GC: Default in Java 9+, balances pause time and throughput.

ZGC / Shenandoah: Low-pause collectors, scalable for large heaps (Java 11+).

Each has tuning options and trade-offs. Learn about:

GC phases: Mark, Sweep, Compact, Copy

GC logs: enable with -Xlog:gc* or -verbose:gc

Analyzing GC behavior with GCViewer, JClarity, GCEasy

🔷 4. Memory Tuning and JVM Flags
Java gives you many options to tune memory:

Examples:

sh
Copy
Edit
-Xms512m             # Initial heap size
-Xmx2g               # Max heap size
-XX:MaxMetaspaceSize=256m
-XX:+UseG1GC         # Use G1 Garbage Collector
-XX:+HeapDumpOnOutOfMemoryError
You can fine-tune:

Heap size

Young/Old gen ratios

GC pause targets

Thread-local allocation buffer size

🔷 5. Memory Profiling in Production
Use tools like Flight Recorder, Mission Control, VisualVM, or async-profiler.

These help detect memory pressure, leaks, long GC pauses, or code paths causing high allocations.

🔷 6. Off-Heap Memory
Used by ByteBuffer.allocateDirect() or libraries like Netty and Hazelcast.

Not managed by GC — you must release it manually or risk native memory leaks.

🔷 7. Finalization vs. Cleaners
finalize() is deprecated and unsafe.

Use java.lang.ref.Cleaner or AutoCloseable + try-with-resources for resource cleanup.

🔷 8. Reference Types
Java has 4 types of references:

Strong (normal references, prevent GC)

Soft (collected only when memory is low)

Weak (collected at next GC cycle)

Phantom (used for cleanup tracking, with ReferenceQueue)

🔷 9. ClassLoader Leaks and Class Unloading
In frameworks like Tomcat/Spring, improper classloader use leads to leaking entire class hierarchies.

Understanding class unloading and Metaspace reclamation is important in modular or dynamic environments.

🔷 10. Memory Footprint Optimization
Prefer primitives over wrappers (int vs Integer)

Reuse immutable objects (like String, BigDecimal)

Use arrays instead of collections if fixed-size

Avoid autoboxing in hot paths

Use StringBuilder instead of string concatenation in loops

🚀 TL;DR – You've Almost Mastered It
You're already deep into JVM internals. From here, it's mostly about:

Profiling & analyzing memory in real systems

Tuning GC and heap for performance

Writing memory-efficient, leak-free Java code

Would you like a visual roadmap of JVM memory or a cheat sheet with all key tuning flags and GC types?

--------------------------------------------------------------------------------------------------------


Memory Layout of an Object
In Java, an object consist of three main parts:

Object header: It contains metadata like the object’s class and lock information for synchronization.
Instance data: It refers to the actual fields or variables that belongs to an object.
Padding: It refers to the extra memory to align the object size to the word size for better performance.
The object header includes:

Class Pointer: This is a reference to the object’s class.
Lock Information: This is used for synchronization in multithreaded programs.
GC-related Information: It is used by the garbage collector for managing the object lifecycle.


--------------------------------------------------------------------------------------------------------



Java Virtual Machine (JVM) Stack Area 

This is not stack memory

The Java Virtual Machine is responsible for running Java applications, and it manages various memory areas, one of which is the Stack Area. In this article, we are going to discuss about JVM Stack Area in depth.

In Java, each thread has its stack called the Run-Time Stack, created when the thread starts.
The memory for a Java Virtual Machine stack does not need to be contiguous.
The JVM manages this stack by pushing and popping frames. Each method call creates a new stack frame that stores:
Method call information: Stores details about the method being executed.
Local variables: Stores local variables defined within the method.
Method parameters: Stores parameters passed to the method.
Return address: Tracks where to return once the method completes.
After all method calls are completed, the stack is emptied and destroyed by the JVM. The stack data is thread-specific, ensuring thread safety for local variables. Each entry in the stack is called a Stack Frame or Activation Record.

Working of Stack
When a method is called a new stack frame is created and pushes onto the stack, this stack frame contains all the information needed for the method execution. The JVM executes the method’s code, using the local variables and parameters stored in the stack frame. Once the method execution is complete, the stack frame is popped off the stack, and control returns to the calling method.

Example: Here, the below code demonstrate how actually the stack works.



// Java Program to Demonstrate the working of stack
import java.io.*;

class Geeks {
    public static int add(int a, int b) {
        return a + b;
    }
    public static void main (String[] args) {
        int ans = add(5, 5);
        System.out.println("Answer: " + ans);
    }
}

Output
Answer: 10
Explanation:

When main method is called, the stack frame for the main is created.
Inside the main, the add method is called with the parameters, now the new stack frame for the add is created.
The add method executes using the provided parameters
After the add method returns, its stack frame is popped off and control returns to main.
Below diagram demonstrates the stack area of JVM:

Stack Area of JVM
Stack Frame Structure 
The stack frame basically consists of three parts. The three parts are

Local Variable Array
Operand Stack
Frame Data
When JVM invokes a Java method, first it checks the class data to determine the number of words (size of the local variable array and operand stack, which is measured in words for each individual method) required by the method in the local variables array and operand stack. It creates a stack frame of the proper size for invoked method and pushes it onto the Java stack. 

1. Local Variable Array (LVA)
The local variables part of the stack frame is organized as a zero-based array of words.
It contains all parameters and local variables of the method.
Each slot or entry in the array is of 4 Bytes.
Values of type int, float, and reference occupy 1 entry or slot in the array i.e. 4 bytes.
Values of double and long occupy 2 consecutive entries in the array i.e. 8 bytes total.
Byte, short, and char values will be converted to int type before storing and occupy 1 slot i.e. 4 Bytes.
But the way of storing Boolean values is varied from JVM to JVM. But most of the JVM gives 1 slot for Boolean values in the local variable array.
The parameters are placed into the local variable array first, in the order in which they are declared.
Example: Let us consider a class Example having a method bike() then the local variable array will be as shown in the below diagram:

// Class Declaration 


class Example 



{   


public void bike(int i, long l, float f, double d, Object o, byte b) 



      {        



      }  



} 


Local Variable Array for bike()

2. Operand Stack (OS)
The JVM uses an operand stack as a workspace for temporary calculations.
Unlike the local variable array, which you access using an index, the operand stack works with special instructions. These instructions can push values onto the stack, pop values off, and perform operations using those values.
Example: Here is how a JVM will use this below code that would subtract two local variables that contain two ints and store the int result in a third local variable:

Assembly Code Instruction for Operand Stack
So here first two instructions iload_0 and iload_1 will push the values in the operand stack from a local variable array. And instruction isub will subtract these two values and store the result back to the operand stack and after istore_2 the result will pop out from the operand stack and will store into a local variable array at position 2.
Working of LVA and OS

3. Frame Data (FD)
It contains all symbolic references (constant pool resolution) and normal method returns related to that particular method.
It also contains a reference to the Exception table which provides the corresponding catch block information in the case of exceptions.
 

Refer: https://www.geeksforgeeks.org/java-virtual-machine-jvm-stack-area/


--------------------------------------------------------------------------------------------------------



Here’s a clean and complete overview of how Java code is executed step by step, from source code to runtime — covering everything from compilation to the JVM lifecycle:



1. Write Java Code
You write source code in a .java file:


public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
2. Compile Java Code → Bytecode
The Java compiler (javac) compiles .java source files into .class files containing bytecode.


javac HelloWorld.java
This produces:


HelloWorld.class
✅ The .class file contains platform-independent bytecode instructions, not native machine code.

3. Class Loading
At runtime, the ClassLoader loads .class files into memory:

Bootstrap ClassLoader (loads core classes like java.lang.*)

Extension ClassLoader

Application ClassLoader (loads user-defined classes)

Loaded classes are stored in the Metaspace in modern Java (Java 8+).

4. Bytecode Verification
Before execution, the JVM verifies the bytecode for safety and correctness:

Ensures no illegal access (e.g., stack overflows, invalid instructions)

Enforces Java's type safety and access control

If verification fails, you get a VerifyError.

5. Execution by JVM
Once verified, execution begins:

JVM calls the main() method

Bytecode is interpreted or Just-In-Time (JIT) compiled into native machine code for better performance

6. Runtime Memory Allocation
As the program runs, JVM allocates memory for:

Objects → on the Heap (Young/Old generation)

Local variables/method frames → on the Stack (per thread)

Class metadata → in Metaspace

Constants → in the Runtime Constant Pool

Static fields → usually in the Heap

7. Just-In-Time (JIT) Compilation
The HotSpot JVM identifies "hot" code (methods used frequently) and compiles them to native code using the JIT compiler for speed.

Types of JIT compilers:

C1 (Client) – Fast startup, used for GUI apps.

C2 (Server) – Optimized for long-running apps.

8. Garbage Collection (GC)
The JVM uses Garbage Collection to automatically free memory:

Reclaims memory from unreachable objects in the heap

Different GC algorithms: G1, ZGC, Parallel GC, etc.

Young generation → frequent collections

Old generation → less frequent but more expensive

9. Program Terminates
Once the main() method or all non-daemon threads finish:

JVM shuts down

GC may run a final time

Shutdown hooks (if any) are called



1. Source Code (.java)
        ↓
2. javac compiles to Bytecode (.class)
        ↓
3. ClassLoader loads class into Metaspace
        ↓
4. Bytecode Verifier checks safety
        ↓
5. Execution begins via Interpreter or JIT
        ↓
6. Objects allocated in Heap, methods in Stack
        ↓
7. JIT optimizes hot code → Native Code
        ↓
8. GC cleans unused Heap memory
        ↓
9. Program ends, JVM shuts down




--------------------------------------------------------------------------------------------------------








