package org.example;

class NumberPrinter {
    private int number = 1;
    private final int MAX = 10;
    private final Object lock = new Object();
    private final Object lock2 = new Object();

    public void method5()  {
//        synchronized (this) {
            // This will block the printer's threads!
            System.out.println("5 block start");
        System.out.println("5 block end");
//            Thread.sleep(10000);
//            System.out.println("1 block end");
//        }
    }

    public void blockPrinter() throws InterruptedException {
        synchronized (NumberPrinter.class) {
            // This will block the printer's threads!
            System.out.println("1 block start");
            Thread.sleep(10000);
            System.out.println("1 block end");
        }
    }

    public void blockPrinter3() throws InterruptedException {
        synchronized (NumberPrinter.class) {
            // This will block the printer's threads!
            System.out.println("3 block start");
            Thread.sleep(10000);
            System.out.println("3 block end");
        }
    }
    public void blockPrinter2() throws InterruptedException {
        synchronized (this) {
            System.out.println("2 block start");
            Thread.sleep(10000);
            System.out.println("2 block end");
        }
    }
    public void blockPrinter4()  {
            synchronized (this) {
                try {
                    System.out.println("4 block start");
                    Thread.sleep(10000);
                    System.out.println("4 block end");
                }
                catch(InterruptedException e){
                    throw new RuntimeException(e);
                }
            }
        }

    public void printOdd() {
        synchronized (lock) {
            while (number <= MAX) {
                if (number % 2 == 0) {
                    try {
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                } else {
                    System.out.println(Thread.currentThread().getName() + " - " + number);
                    number++;
                    lock.notify();
                }
            }
        }
    }

    public void printEven() {
        synchronized (lock) {
            while (number <= MAX) {
                if (number % 2 != 0) {
                    try {
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                } else {
                    System.out.println(Thread.currentThread().getName() + " - " + number);
                    number++;
                    lock.notify();
                }
            }
        }
    }
}

public class Main {

    public static void main(String[] args) throws Exception{
        NumberPrinter printer = new NumberPrinter();
        NumberPrinter printer2 = new NumberPrinter();

        Thread oddThread = new Thread(printer::printOdd, "Odd-Thread");
        Thread evenThread = new Thread(printer::printEven, "Even-Thread");

        Thread block = new Thread(() -> {
                try {
                    printer.blockPrinter();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }, "Even-Thread");
        Thread block3 = new Thread(() -> {
            try {
                printer2.blockPrinter3();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }, "Even-Thread");
        Thread th5 = new Thread( () -> printer2.method5());

        Thread th6 = new Thread( () ->
                    printer2.blockPrinter4());


        printer.method5();
        oddThread.start();
        evenThread.start();
        th5.start();
        block.start();
        block3.start();
        th6.start();
        printer.blockPrinter2();
        
    }
}



o/p



5 block start
5 block end
5 block start
5 block end
1 block start
2 block start
4 block start
Odd-Thread - 1
Even-Thread - 2
Odd-Thread - 3
Even-Thread - 4
Odd-Thread - 5
Even-Thread - 6
Odd-Thread - 7
Even-Thread - 8
Odd-Thread - 9
Even-Thread - 10
4 block end
1 block end
3 block start
2 block end
3 block end
