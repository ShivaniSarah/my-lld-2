public class PolymorphismTest {
   public static void main(String[] args) {
     print(null);
     print(List.of(1, 2, 3));
     print("Hello");
   }

   public static void print(String s) {
     if(s != null && !(s.isEmpty())) {
       System.out.println(s);
     } else {
       System.out.println("String is null or empty");
     }
   }
 
public static void print(List<Integer> s) {
     if(s != null && !(s.isEmpty())) {
       System.out.println(s);
     } else {
       System.out.println("List is null or empty");
     }
   }

 }


public class PolymorphismTest {
  public static void main(String[] args) {
    print(null);
     }

  public static void print(String s) {
    if(s != null && !(s.isEmpty())) {
      System.out.println(s);
    } else {
      System.out.println("String is null or empty");
    }
  }

  public static void print(Object s) {
    System.out.println("I am object");
  }

}





@FunctionalInterface
Interface myFunction{
   Void execute(); 
}


@FunctionalInterface
interface TestInterface {
  void test();
  int hashCode();
}













class Student {
   public int id;
   public String name;
   public Student(String name, int id) {
     this.name = name;
     this.id = id;
   }
   public int hashCode() {
     return this.id;
   }
   public boolean equals(Object o) {
     if (o instanceof Student) {
       Student s = (Student) o;
       return s.id == this.id;
     }
     return false;
   }
 }
 
public class UpdateHashSet {
   public static void main(String[] args) {
     Set<Student> studentSet = new HashSet<>();
     Student st1 = new Student("Bob", 1);
     Student st2 = new Student("Alex", 2);
     Student st3 = new Student("John", 3);
     studentSet.add(st1);
     studentSet.add(st2);
     studentSet.add(st3);
     System.out.println(studentSet.size());   // 3
     st1.id = 3;//  
    System.out.println(st1.equals(st3)); // not get executed
     System.out.println(studentSet.size());    // 
   }
 }

