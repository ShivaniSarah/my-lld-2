import java.util.Arrays;

public class StreamExample {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6};

        int result = Arrays.stream(arr)
            .filter(n -> n % 2 == 0)    // Keep even numbers: 2, 4, 6
            .map(n -> n * n)            // Square them: 4, 16, 36
            .reduce(0, Integer::sum);   // Sum: 4 + 16 + 36 = 56

        System.out.println("Result: " + result);
    }
}



or




import java.util.Arrays;

public class StreamWithIfElse {
    public static void main(String[] args) {
        int[] arr = {2, 3, 4, 5, 6, 7, 8};

        int result = Arrays.stream(arr)
            .filter(n -> {
                if (n % 2 == 0) {
                    System.out.println("Keeping even: " + n);
                    return true;
                } else {
                    System.out.println("Filtering out odd: " + n);
                    return false;
                }
            })
            .map(n -> {
                if (n < 5) {
                    System.out.println("Squaring small even: " + n);
                    return n * n;
                } else {
                    System.out.println("Doubling large even: " + n);
                    return n * 2;
                }
            })
            .reduce(0, (a, b) -> {
                System.out.println("Adding " + a + " + " + b);
                return a + b;
            });

        System.out.println("Final Result: " + result);
    }
}


flatMap:




import java.util.Arrays;

public class FlatMapExample {
    public static void main(String[] args) {
        Integer[][] arr = {{1, 2}, {3, 4}, {5, 6}};

        Arrays.stream(arr)  // Stream of arrays
            .flatMap(Arrays::stream)  // Flatten the array into a single stream
            .forEach(System.out::println);  // Output: 1, 2, 3, 4, 5, 6
    }
}


or


import java.util.Arrays;
import java.util.List;

public class ComplexFlatMapExample {
    public static void main(String[] args) {
        List<List<List<Integer>>> nestedLists = Arrays.asList(
            Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)),
            Arrays.asList(Arrays.asList(5, 6), Arrays.asList(7, 8))
        );

        nestedLists.stream()  // Stream of List<List<List<Integer>>>
            .flatMap(List::stream)  // Flatten List<List<List<Integer>>> to List<List<Integer>>
            .flatMap(List::stream)  // Flatten List<List<Integer>> to List<Integer>
            .map(n -> n * 2)  // Perform some transformation (multiply by 2)
            .forEach(System.out::println);  // Output: 2, 4, 6, 8, 10, 12, 14, 16
    }
}

