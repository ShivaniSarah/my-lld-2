Implement a CountDownLatch-like mechanism. java


ChatGPT said:
Here’s a simple custom implementation of a CountDownLatch-like class in Java without using java.util.concurrent.CountDownLatch. It provides the core await() and countDown() behavior:

The constructor sets the initial count.

await() blocks the thread while count > 0.

countDown() decreases the count by 1 and calls notifyAll() when the count reaches zero to wake up waiting threads.

getCount() returns the current count (optional helper).

This mimics the standard CountDownLatch: the main thread waits until all worker threads call countDown() before proceeding.



package org.example;

class MyCountDownLatch {
    private int count;

    public MyCountDownLatch(int count) {
        if (count < 0) throw new IllegalArgumentException("count cannot be negative");
        this.count = count;
    }

    public synchronized void await() throws InterruptedException {
        while (count > 0) {
            wait();
        }
    }

    public synchronized void countDown() {
        if (count > 0) {
            count--;
            if (count == 0) {
                notifyAll();
            }
        }
    }

    public synchronized int getCount() {
        return count;
    }
}
public class Main {
    public static void main(String[] args) throws InterruptedException {
        MyCountDownLatch latch = new MyCountDownLatch(3);

        Runnable task = () -> {
            System.out.println(Thread.currentThread().getName() + " running");
            try {
                Thread.sleep(1000); // simulate work
            } catch (InterruptedException e) {}
            System.out.println(Thread.currentThread().getName() + " done");
            latch.countDown();
        };

        new Thread(task, "Thread-1").start();
        new Thread(task, "Thread-2").start();
        new Thread(task, "Thread-3").start();

        System.out.println("Main thread waiting");
        latch.await();
        System.out.println("All threads finished, main thread proceeding");
    }
}



The aim of implementing a CountDownLatch-like mechanism is to provide a synchronization aid that allows one or more threads to wait until a set of operations performed by other threads completes.

More specifically:
You initialize the latch with a count representing how many events or threads need to complete.

Threads that call await() will block (wait) until this count reaches zero.

Other threads call countDown() when they finish their work, decreasing the count by one.

When the count hits zero, all waiting threads are released and can continue.

Why use such a mechanism?
To coordinate multiple threads in complex concurrent programs.

To ensure that some work doesn’t proceed until other tasks are completed.

Common in scenarios like:

Waiting for multiple worker threads to finish initialization before starting main processing.

Waiting for a group of tasks to complete before moving on.

Coordinating phases in parallel algorithms.

In short:
It helps threads wait for other threads to finish a set of actions before proceeding.

