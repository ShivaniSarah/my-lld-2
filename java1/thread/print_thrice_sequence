package org.example;

public class ThreeThreadSequence {
    private static final int MAX = 30;
    private int counter = 1;
    private final Object lock = new Object();

    private void print(int threadId) {
        while (true) {
            synchronized (lock) {
                while (counter <= MAX && (counter - 1) % 3 != threadId) {
                    try {
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        return;
                    }
                }
                if (counter > MAX) {
                    lock.notifyAll();
                    return;
                }
                System.out.println("Thread " + (char)('A' + threadId) + ": " + counter);
                counter++;
                lock.notifyAll();
            }
        }
    }

    public static void main(String[] args) {
        ThreeThreadSequence sequence = new ThreeThreadSequence();

        Runnable r0 = () -> sequence.print(0); // Thread A
        Runnable r1 = () -> sequence.print(1); // Thread B
        Runnable r2 = () -> sequence.print(2); // Thread C

        new Thread(r0).start();
        new Thread(r1).start();
        new Thread(r2).start();
    }
}



o/p


Thread A: 1
Thread B: 2
Thread C: 3
Thread A: 4
Thread B: 5
Thread C: 6
Thread A: 7
Thread B: 8
Thread C: 9
Thread A: 10
Thread B: 11
Thread C: 12
Thread A: 13
Thread B: 14
Thread C: 15
Thread A: 16
Thread B: 17
Thread C: 18
Thread A: 19
Thread B: 20
Thread C: 21
Thread A: 22
Thread B: 23
Thread C: 24
Thread A: 25
Thread B: 26
Thread C: 27
Thread A: 28
Thread B: 29
Thread C: 30
