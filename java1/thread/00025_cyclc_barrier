implement cyclc barrier in java


ChatGPT said:
Sure! Here's a simple Java example demonstrating how to use a CyclicBarrier with multiple threads. The threads wait at the barrier until all have reached it, then proceed together.


import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

public class CyclicBarrierExample {

    public static void main(String[] args) {

        final int numberOfThreads = 3;

        // Barrier action to run once all threads reach the barrier
        Runnable barrierAction = () -> System.out.println("All threads reached the barrier. Proceeding...");

        CyclicBarrier barrier = new CyclicBarrier(numberOfThreads, barrierAction);

        // Create and start threads
        for (int i = 1; i <= numberOfThreads; i++) {
            Thread t = new Thread(new Task(barrier), "Thread-" + i);
            t.start();
        }
    }

    static class Task implements Runnable {
        private final CyclicBarrier barrier;

        Task(CyclicBarrier barrier) {
            this.barrier = barrier;
        }

        @Override
        public void run() {
            try {
                System.out.println(Thread.currentThread().getName() + " is working...");
                Thread.sleep((long)(Math.random() * 3000)); // simulate work

                System.out.println(Thread.currentThread().getName() + " is waiting at the barrier");
                barrier.await();  // Wait for other threads

                System.out.println(Thread.currentThread().getName() + " resumed after barrier");
            } catch (InterruptedException | BrokenBarrierException e) {
                e.printStackTrace();
            }
        }
    }
}


How it works:
3 threads do some work (simulate with sleep).

Each calls barrier.await() and waits until all 3 have called it.

Once all threads reach await(), the barrier action runs, then all threads proceed.

Want me to show you a version with repeated barrier use (multiple phases)?
