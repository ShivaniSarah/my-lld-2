
Concurrent Billing Engine

Calculate user bills from millions of usage events.

Ensure each bill is calculated exactly once, even with concurrent threads.

using multi threading in java


ChatGPT said:
Building a Concurrent Billing Engine in Java requires:

Concurrency-safe processing to ensure each usage event is processed exactly once.

Efficient data partitioning and thread management for scalability.

Correct aggregation of user bills.

üîß Key Concepts to Use:
Thread-safe queue (e.g. ConcurrentLinkedQueue)

ConcurrentHashMap for user billing data

Atomic operations to avoid double billing

Worker thread pool (ExecutorService)

‚úÖ Assumptions:
UsageEvent class contains: userId, amount, eventId

Events come from a pre-loaded queue (like Kafka, DB, file)

Each eventId is unique

üßµ Java Multithreaded Billing Engine Example:

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;

class UsageEvent {
    final String userId;
    final double amount;
    final String eventId;

    UsageEvent(String userId, double amount, String eventId) {
        this.userId = userId;
        this.amount = amount;
        this.eventId = eventId;
    }
}

public class ConcurrentBillingEngine {
    private final Queue<UsageEvent> eventQueue = new ConcurrentLinkedQueue<>();
    private final ConcurrentMap<String, Double> userBills = new ConcurrentHashMap<>();
    private final Set<String> processedEvents = ConcurrentHashMap.newKeySet(); // Deduplication

    public void loadEvents(List<UsageEvent> events) {
        eventQueue.addAll(events);
    }

    public void processEventsConcurrently(int numThreads) throws InterruptedException {
        ExecutorService executor = Executors.newFixedThreadPool(numThreads);

        for (int i = 0; i < numThreads; i++) {
            executor.execute(() -> {
                while (true) {
                    UsageEvent event = eventQueue.poll();
                    if (event == null) break;

                    // Ensure event is processed exactly once
                    if (processedEvents.add(event.eventId)) {
                        userBills.merge(event.userId, event.amount, Double::sum);
                    }
                }
            });
        }

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.HOURS);
    }

    public void printUserBills() {
        userBills.forEach((user, bill) -> 
            System.out.printf("User: %s, Total Bill: %.2f%n", user, bill));
    }

    public static void main(String[] args) throws InterruptedException {
        ConcurrentBillingEngine engine = new ConcurrentBillingEngine();

        // Simulated events
        List<UsageEvent> events = List.of(
            new UsageEvent("user1", 10.0, "e1"),
            new UsageEvent("user1", 15.0, "e2"),
            new UsageEvent("user2", 5.0, "e3"),
            new UsageEvent("user1", 10.0, "e1") // duplicate
        );

        engine.loadEvents(events);
        engine.processEventsConcurrently(4);
        engine.printUserBills();
    }
}
üõ°Ô∏è Guarantees:
Each event processed exactly once using processedEvents set.

Concurrent threads don't corrupt shared data due to:

ConcurrentHashMap for user bills

ConcurrentLinkedQueue for thread-safe event access

ConcurrentHashMap.newKeySet() to track processed events atomically

üìà Optimizations:
Use BlockingQueue if events are streamed continuously

Use LongAdder for high-concurrency counters

Batch update to a database for real-world persistence

Would you like a version using a streaming input (Kafka) or persisting to a database (JDBC) as well?


