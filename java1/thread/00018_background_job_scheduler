Design a background job scheduler using multithreading in java


ChatGPT said:
Hereâ€™s a complete, modular background job scheduler in Java using multithreading.

âœ… Features:
Schedule one-time or recurring jobs.

Thread-safe execution.

Job priority support.

Job cancellation.

Supports delayed start and fixed-rate interval execution.

Uses ScheduledExecutorService and custom classes for job management.



ðŸ”§ Key Components:
Job: Represents a unit of work.

JobScheduler: Central manager to schedule and manage jobs.

JobWrapper: Internal wrapper for scheduling metadata and cancellation.

Uses ConcurrentHashMap for thread-safe job tracking.





package org.example;

import java.util.UUID;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;

class JobScheduler {

    // Core executor with thread pool
    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(5);
    private final ConcurrentHashMap<String, JobWrapper> jobs = new ConcurrentHashMap<>();

    // ==== Job Definition ====
    public interface Job {
        void execute();
    }

    // ==== Job Wrapper ====
    private static class JobWrapper {
        private final String id;
        private final Job job;
        private final boolean recurring;
        private final long intervalMillis;
        private final ScheduledFuture<?> future;
        private final AtomicBoolean cancelled = new AtomicBoolean(false);

        public JobWrapper(String id, Job job, boolean recurring, long intervalMillis, ScheduledFuture<?> future) {
            this.id = id;
            this.job = job;
            this.recurring = recurring;
            this.intervalMillis = intervalMillis;
            this.future = future;
        }

        public void cancel() {
            cancelled.set(true);
            future.cancel(true);
        }

        public boolean isCancelled() {
            return cancelled.get();
        }
    }

    // ==== Schedule a one-time job ====
    public String scheduleOneTime(Job job, long delayMillis) {
        String id = UUID.randomUUID().toString();
        ScheduledFuture<?> future = executorService.schedule(() -> {
            if (!jobs.get(id).isCancelled()) job.execute();
            jobs.remove(id);
        }, delayMillis, TimeUnit.MILLISECONDS);
        jobs.put(id, new JobWrapper(id, job, false, 0, future));
        return id;
    }

    // ==== Schedule a recurring job ====
    public String scheduleRecurring(Job job, long initialDelay, long intervalMillis) {
        String id = UUID.randomUUID().toString();
        ScheduledFuture<?> future = executorService.scheduleAtFixedRate(() -> {
            if (!jobs.get(id).isCancelled()) job.execute();
        }, initialDelay, intervalMillis, TimeUnit.MILLISECONDS);
        jobs.put(id, new JobWrapper(id, job, true, intervalMillis, future));
        return id;
    }

    // ==== Cancel a job ====
    public boolean cancelJob(String jobId) {
        JobWrapper wrapper = jobs.get(jobId);
        if (wrapper != null) {
            wrapper.cancel();
            jobs.remove(jobId);
            return true;
        }
        return false;
    }

    // ==== Shut down all jobs ====
    public void shutdown() {
        jobs.values().forEach(JobWrapper::cancel);
        executorService.shutdownNow();
        System.out.println("Scheduler shutdown.");
    }

    // ==== For demonstration ====
    public static void main(String[] args) throws InterruptedException {
        JobScheduler scheduler = new JobScheduler();

        // One-time job after 3 seconds
        String job1 = scheduler.scheduleOneTime(() ->
                System.out.println("One-time job executed at " + System.currentTimeMillis()), 3000);

        // Recurring job every 2 seconds
        String job2 = scheduler.scheduleRecurring(() ->
                System.out.println("Recurring job executed at " + System.currentTimeMillis()), 1000, 2000);

        // Cancel recurring job after 7 seconds
        Thread.sleep(7000);
        scheduler.cancelJob(job2);
        System.out.println("Recurring job cancelled");

        // Let remaining jobs run for a few more seconds
        Thread.sleep(3000);
        scheduler.shutdown();
    }
}



o/p




Recurring job executed at 1747936543983
Recurring job executed at 1747936545982
One-time job executed at 1747936545982
Recurring job executed at 1747936547979
Recurring job executed at 1747936549981
Recurring job cancelled
Scheduler shutdown.




----------------------------------------------------------------------------------------------------------------------------------------------------------




ðŸ”„ Optional Enhancements (if needed):

Job prioritization queue with PriorityBlockingQueue.

Cron-like scheduling.

Job retry on failure.

Persistent store to reload jobs on reboot.

Add a Web or CLI interface to manage jobs.

Job pause/resume capabilities

Cron-like expressions (e.g., 0 0 * * *)

Or if youâ€™d prefer a DB (like H2/PostgreSQL) for job persistence instead of file serialization.


Answer in chat instead
Here's the full Java code for a background job scheduler with:

Priority-based queue (PriorityBlockingQueue)

Cron-like scheduling using interval & nextRunTime

Retry on failure with max retry limit

Persistence to file and reload on reboot

CLI interface for management


Let me know if you'd like to replace the CLI with a Web interface or integrate more advanced cron parsing.



