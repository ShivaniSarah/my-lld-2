design job scheduler in java multi threading


ChatGPT said:
Here’s a clean, multithreaded Job Scheduler in Java that supports:

Scheduling jobs to run at fixed intervals

Priority-based execution

Retry on failure

Thread-safe concurrent scheduling/execution

Key components:
A priority queue (PriorityBlockingQueue) to hold scheduled jobs sorted by next run time and priority

A worker thread pool (ScheduledExecutorService) to run jobs

Retry logic for failed jobs

Methods to schedule and cancel jobs



import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.UUID;
import java.util.concurrent.*;

public class JobScheduler {

    private final PriorityBlockingQueue<ScheduledJob> jobQueue = new PriorityBlockingQueue<>();
    private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(4);
    private final ConcurrentMap<String, ScheduledJob> jobsMap = new ConcurrentHashMap<>();
    private volatile boolean running = true;

    public JobScheduler() {
        Thread schedulerThread = new Thread(this::dispatchLoop);
        schedulerThread.setDaemon(true);
        schedulerThread.start();
    }

    private void dispatchLoop() {
        while (running) {
            try {
                ScheduledJob job = jobQueue.take();
                long delay = Duration.between(LocalDateTime.now(), job.nextRunTime).toMillis();
                if (delay > 0) {
                    // Put back and sleep until job is ready
                    jobQueue.offer(job);
                    Thread.sleep(Math.min(delay, 1000));
                    continue;
                }
                // Remove job from queue and submit for execution
                jobsMap.remove(job.id);
                executor.submit(() -> executeJob(job));
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                running = false;
            }
        }
        executor.shutdown();
    }

    private void executeJob(ScheduledJob job) {
        try {
            job.task.run();
            job.retries = 0;
            // Reschedule next run
            job.nextRunTime = job.nextRunTime.plus(job.interval);
            scheduleJob(job);
        } catch (Exception e) {
            System.out.println("Job " + job.id + " failed: " + e.getMessage());
            if (job.retries < job.maxRetries) {
                job.retries++;
                job.nextRunTime = LocalDateTime.now().plusSeconds(10); // retry after 10 sec
                scheduleJob(job);
            } else {
                System.out.println("Job " + job.id + " exceeded max retries, giving up.");
            }
        }
    }

    public void scheduleJob(String id, Runnable task, LocalDateTime firstRun, Duration interval, int priority, int maxRetries) {
        ScheduledJob job = new ScheduledJob(id, task, firstRun, interval, priority, maxRetries);
        scheduleJob(job);
    }

    private void scheduleJob(ScheduledJob job) {
        if (!running) return;
        jobQueue.offer(job);
        jobsMap.put(job.id, job);
    }

    public void cancelJob(String id) {
        ScheduledJob job = jobsMap.remove(id);
        if (job != null) {
            jobQueue.remove(job);
            System.out.println("Cancelled job " + id);
        }
    }

    public void shutdown() {
        running = false;
        executor.shutdownNow();
    }

    static class ScheduledJob implements Comparable<ScheduledJob> {
        final String id;
        final Runnable task;
        volatile LocalDateTime nextRunTime;
        final Duration interval;
        final int priority;
        final int maxRetries;
        volatile int retries;

        ScheduledJob(String id, Runnable task, LocalDateTime nextRunTime, Duration interval, int priority, int maxRetries) {
            this.id = id;
            this.task = task;
            this.nextRunTime = nextRunTime;
            this.interval = interval;
            this.priority = priority;
            this.maxRetries = maxRetries;
            this.retries = 0;
        }

        @Override
        public int compareTo(ScheduledJob other) {
            int cmp = this.nextRunTime.compareTo(other.nextRunTime);
            if (cmp == 0) {
                // Higher priority first
                return Integer.compare(other.priority, this.priority);
            }
            return cmp;
        }
    }

    // Test
    public static void main(String[] args) throws InterruptedException {
        JobScheduler scheduler = new JobScheduler();

        scheduler.scheduleJob(
            "job1",
            () -> System.out.println("Running job1 at " + LocalDateTime.now()),
            LocalDateTime.now().plusSeconds(2),
            Duration.ofSeconds(5),
            1,
            3
        );

        scheduler.scheduleJob(
            "job2",
            () -> {
                System.out.println("Running job2 at " + LocalDateTime.now());
                if (Math.random() < 0.7) throw new RuntimeException("Random failure");
            },
            LocalDateTime.now().plusSeconds(1),
            Duration.ofSeconds(7),
            5,
            5
        );

        Thread.sleep(30000); // run for 30 sec then shutdown
        scheduler.shutdown();
    }
}



Explanation:
The dispatchLoop continuously polls the queue, waits until the next job’s run time, then submits it for execution.

Each job runs in a thread pool.

On failure, jobs retry after a delay until max retries reached.

Jobs can be canceled by ID.

Jobs are prioritized by run time and priority.

Simple main method demonstrates scheduling two jobs.

If you want, I can help add:

Cron-like scheduling

Job persistence

CLI or API for dynamic job management



