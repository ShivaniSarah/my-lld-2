https://www.geeksforgeeks.org/serialization-in-java/

Serialization and Deserialization in Java with Example

 
Serialization is a mechanism of converting the state of an object into a byte stream. Deserialization is the reverse process 
where the byte stream is used to recreate the actual Java object in memory. 
This mechanism is used to persist the object.serialize-deserialize-java 
The byte stream created is platform independent.
So, the object serialized on one platform can be deserialized on a different platform. 
To make a Java object serializable we implement the java.io.Serializable interface.

The ObjectOutputStream class contains writeObject() method for serializing an Object. 
 
public final void writeObject(Object obj)throws IOException

The ObjectInputStream class contains readObject() method for deserializing an object. 

public final Object readObject() throws IOException, ClassNotFoundException

Advantages of Serialization 

To save/persist state of an object. 
To travel an object across a network.

Only the objects of those classes can be serialized which are implementing java.io.Serializable interface. 
Serializable is a marker interface (has no data member and method).
It is used to "mark" java classes so that objects of these classes may get certain capability. 
Other examples of marker interfaces are:- Cloneable and Remote. 

Points to remember 

1. If a parent class has implemented Serializable interface then child class doesn't need to implement it but vice-versa is not true.
2. Only non-static data members are saved via Serialization process. 
3. Static data members and transient data members are not saved via Serialization process. 
So, if you don't want to save value of a non-static data member then make it transient. 

------------------------------------------------------------------------------------------------------------------------------------------------------

4. Constructor of object is never called when an object is deserialized. 

When an object is deserialized, its constructor is not invoked. Instead, the object is reconstructed from its byte stream (internal binary representation) directly in memory.

üìå Example:


import java.io.*;

class A implements Serializable {
    A() {
        System.out.println("Constructor of A called");
    }
}

public class Test {
    public static void main(String[] args) throws Exception {
        A a = new A();

        // Serialize
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("a.ser"));
        out.writeObject(a);
        out.close();

        // Deserialize
        ObjectInputStream in = new ObjectInputStream(new FileInputStream("a.ser"));
        A a2 = (A) in.readObject(); // Constructor not called here
        in.close();
    }
}



‚úÖ Output:
Constructor of A called

Notice: The constructor is only called when we create new A() ‚Äî not during deserialization (readObject()).

---------------------------------------------------------------------------------------------------------------------------------------

5. Associated objects must be implementing Serializable interface.

If a class (e.g., A) contains a field (e.g., B ob = new B();), then B must also implement Serializable, otherwise you'll get a NotSerializableException.

üìå Example:

import java.io.*;

class B implements Serializable {
    int value = 100;
}

class A implements Serializable {
    B ob = new B(); // Associated object
}

public class Test {
    public static void main(String[] args) throws Exception {
        A a = new A();

        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("a.ser"));
        out.writeObject(a);  // Will work because B is Serializable
        out.close();
    }
}


‚ùå If B doesn't implement Serializable, you‚Äôll get:
java.io.NotSerializableException: B

---------------------------------------------------------------------------------------------------------------------------------------


6. SerialVersionUID

The Serialization runtime associates a version number with each Serializable class called a SerialVersionUID,
which is used during Deserialization to verify that sender and receiver of a serialized object have 
loaded classes for that object which are compatible with respect to serialization.
If the receiver has loaded a class for the object that has different UID than that of corresponding sender's class,
the Deserialization will result in an InvalidClassException. 

A Serializable class can declare its own UID explicitly by declaring a field name. It must be static, final and
of type long. i.e- private static final long serialVersionUID=42L; 
If a serializable class doesn't explicitly declare a serialVersionUID,
then the serialization runtime will calculate a default one for that class based on various aspects of class,
as described in Java Object Serialization Specification.
However it is strongly recommended that all serializable classes explicitly declare serialVersionUID value,
since its computation is highly sensitive to class details 
that may vary depending on compiler implementations, any change in class or using different id may affect the serialized data.
It is also recommended to use private modifier for UID since it is not useful as inherited member. serialver The serialver is
a tool that comes with JDK. It is used to get serialVersionUID number for Java classes. 

You can run the following command to get serialVersionUID serialver [-classpath classpath] [-show] [classname...]

üßæ 1. Define a Serializable Class
// Employee.java
import java.io.Serializable;

public class Employee implements Serializable {
    private static final long serialVersionUID = 1L;

    private String name;
    private int id;

    public Employee(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public String toString() {
        return "Employee{name='" + name + "', id=" + id + "}";
    }
}

üíæ 2. Serialize the Object

// SerializeDemo.java
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

public class SerializeDemo {
    public static void main(String[] args) throws IOException {
        Employee emp = new Employee("Alice", 101);
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("employee.ser"));
        out.writeObject(emp);
        out.close();
        System.out.println("Object serialized: " + emp);
    }
}

üì• 3. Deserialize the Object

// DeserializeDemo.java
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class DeserializeDemo {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        ObjectInputStream in = new ObjectInputStream(new FileInputStream("employee.ser"));
        Employee emp = (Employee) in.readObject();
        in.close();
        System.out.println("Object deserialized: " + emp);
    }
}

üîÅ Now: Change serialVersionUID in Employee class

Change serialVersionUID from 1L to 2L without deleting employee.ser file:

// Change this line in Employee.java
private static final long serialVersionUID = 2L;

Recompile only Employee.java (not SerializeDemo).

üö® Run DeserializeDemo.java

Output will be:

Exception in thread "main" java.io.InvalidClassException: Employee; 
local class incompatible: stream classdesc serialVersionUID = 1, local class serialVersionUID = 2
üí• This error occurs because serialVersionUIDs don't match ‚Äî the object was serialized with version 1, but we're trying to deserialize it with version 2.

‚úÖ Fix: Keep serialVersionUID the Same

If you leave it as:
private static final long serialVersionUID = 1L;
‚Ä¶even if you change other non-critical parts of the class, deserialization will still work as long as the UID matches and structure is compatible.

| Action                                             | Result                           |
| -------------------------------------------------- | -------------------------------- |
| Serialize with UID = 1L, Deserialize with UID = 1L | ‚úÖ Works                          |
| Serialize with UID = 1L, Deserialize with UID = 2L | ‚ùå Throws `InvalidClassException` |


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q. Is the serialized output stored in file employee.ser ?

Ans:

Yes, exactly. In the example I provided:

ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("employee.ser"));
out.writeObject(emp);

The serialized form of the Employee object is stored in the file named employee.ser.

üîç What is in employee.ser?

This file contains a binary representation of the Employee object, including:

Class metadata (like class name, serialVersionUID, fields, etc.)

The actual data of the object (like name = "Alice", id = 101)

The version (UID) used to validate compatibility during deserialization

üì• Why it's important?

When you later call:

ObjectInputStream in = new ObjectInputStream(new FileInputStream("employee.ser"));
Employee emp = (Employee) in.readObject();

Java will:
Read the serialVersionUID from the file

Compare it with the UID of the current Employee class loaded in memory

If they match ‚Üí deserialization succeeds ‚úÖ
If not ‚Üí InvalidClassException is thrown ‚ùå

üõ† Where is employee.ser stored?

It‚Äôs stored in your current working directory unless you specify a full path:
new FileOutputStream("path/to/employee.ser");
You can open the file with a hex editor or xxd on Linux/macOS, but it won‚Äôt be human-readable.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




import java.io.*;

// Serializable class
class Emp implements Serializable {
    private static final long serialVersionUID = 129348938L;

    transient int a;       // Not serialized
    static int b;          // Not serialized (static)
    String name;
    int age;

    // Constructor
    public Emp(String name, int age, int a, int b) {
        this.name = name;
        this.age = age;
        this.a = a;
        this.b = b;
    }
}

public class SerialExample {

    public static void printData(Emp object) {
        System.out.println("name = " + object.name);
        System.out.println("age = " + object.age);
        System.out.println("a = " + object.a);
        System.out.println("b = " + Emp.b);
    }

    public static void main(String[] args) {
        Emp object = new Emp("ab", 20, 2, 1000);
        String filename = "employee.ser";

        // Serialization
        try (FileOutputStream fileOut = new FileOutputStream(filename);
             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {

            out.writeObject(object);
            System.out.println("Object has been serialized\nData before Deserialization:");
            printData(object);

            // Change static value after serialization
            Emp.b = 2000; //or  object.b = 2000

        } catch (IOException ex) {
            System.out.println("IOException is caught");
        }

        object = null;

        // Deserialization
        try (FileInputStream fileIn = new FileInputStream(filename);
             ObjectInputStream in = new ObjectInputStream(fileIn)) {

            object = (Emp) in.readObject();
            System.out.println("\nObject has been deserialized\nData after Deserialization:");
            printData(object);

        } catch (IOException | ClassNotFoundException ex) {
            System.out.println("Exception is caught: " + ex);
        }
    }
}


o/p


Object has been serialized
Data before Deserialization:
name = ab
age = 20
a = 2
b = 1000

Object has been deserialized
Data after Deserialization:
name = ab
age = 20
a = 0
b = 2000


| Field Type    | Serialized? | Value after Deserialization |
| ------------- | ----------- | --------------------------- |
| `name`, `age` | ‚úÖ Yes       | Same as original            |
| `transient a` | ‚ùå No        | Default (0)                 |
| `static b`    | ‚ùå No        | Current class value (2000)  |



Deserialization step:
a = 0 ‚Üí because it was transient

b = 2000 ‚Üí reflects current static value in memory

name and age retain original values



Static fields belong to the class, not the object.
They are also not serialized.
After deserialization, their value comes from the current class definition in memory, not from the serialized data.


Transient fields are not serialized.
On deserialization, a is reset to its default value (for int, it's 0).



Transient Vs Final:
final variables will be participated into serialization directly by their values.
Hence declaring a final variable as transient there is no use.
//the compiler assign the value to final variable

