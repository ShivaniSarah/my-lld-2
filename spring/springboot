https://www.geeksforgeeks.org/spring-boot-interview-questions-and-answers/
https://www.youtube.com/watch?v=90hAvj0A8C8&list=PL6W8uoQQ2c60g6_fcjDCLHSx1LBeVYqyZ
https://github.com/utk25/infraclould

@SpringBootApplication
@EnableAutoConfiguration
@OpenAPIDefinition // for swagger documentation
@ComponentScan
    @Component
    @Service
    @RestController
    @Controller
    @Repository
@Configuration
@Bean
@Autowired
@PostMapping
@GetMapping
@Value
@Qualifier
@RequestBody 
@ResponseBody 
@Profile

Dependency Injection => helps in loose coupling and high cohesion
Inversion Of Control
Spring IOC container


actuator
@Transactional
implement atomic transaction so that it can rollback

-----------

The @Qualifier annotation in Spring is used to resolve ambiguity when multiple beans of the same type are present in the application context. By specifying a qualifier, Spring knows which bean to inject when there are multiple candidates.

Example:
java
Copy
Edit
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

interface Vehicle {
    void drive();
}

@Component
class Car implements Vehicle {
    public void drive() {
        System.out.println("Driving a car!");
    }
}

@Component
class Bike implements Vehicle {
    public void drive() {
        System.out.println("Riding a bike!");
    }
}

@Component
class Driver {
    private Vehicle vehicle;

    @Autowired
    @Qualifier("bike")  // Specifies which vehicle to inject
    public void setVehicle(Vehicle vehicle) {
        this.vehicle = vehicle;
    }

    public void drive() {
        vehicle.drive();
    }
}



--------



The @SpringBootApplication annotation in Spring Boot is a convenience annotation that combines three important annotations:

@EnableAutoConfiguration: Enables Spring Boot's auto-configuration mechanism.

@ComponentScan: Tells Spring to scan for components, configurations, and services in the current package and its sub-packages.

@Configuration: Marks the class as a source of bean definitions for the application context.

It is typically placed on the main class of a Spring Boot application to kickstart the application context and automatically configure the application.
