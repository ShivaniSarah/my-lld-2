Spring MVC

pom.xml

It will download dependencies from maven repository: https://mvnrepository.com/
The pom.xml file in a Spring project is essential because it manages project dependencies
and configurations using Maven, which is a build automation tool.

Dependency Management: It declares the dependencies (libraries and frameworks) 
needed for your Spring project. Maven handles downloading and managing these libraries automatically,
ensuring compatibility and avoiding version conflicts.

Build Lifecycle: Maven provides a structured lifecycle for building, testing, and deploying the application.
Plugin Management: It includes plugins for compiling code, running tests, generating reports, and 
packaging the application (e.g., into a JAR or WAR file).
Version Management: It makes it easy to manage versions of your dependencies and plugins, 
allowing for clean upgrades and patches.
Multi-Module Support: Maven supports multi-module projects, allowing you to manage multiple related projects under a single pom.xml.

Maven is primarily a command-line interface (CLI) tool used for building and managing Java-based projects.
It automates the process of project compilation, dependency management, packaging, and more. 
Developers interact with Maven through a series of commands issued in a terminal or command prompt.

Maven wrapper properties and script files like mvnw for linux and mvnw.cmd for windows are there means that we can use maven commands to run
the maven repo

The Spring IOC (Inversion of Control) Container is a core component of the Spring Framework that is responsible for managing the lifecycle, configuration, and dependencies of the objects (also known as beans) within a Spring application.

Inversion of Control (IOC)
Inversion of Control is a design principle where the control of object creation and management is transferred from the application to a container (like the Spring IOC container). This allows developers to delegate the responsibility of managing dependencies and object lifecycle to the container rather than doing it manually within the application code.

Spring Actuator:
In Spring, an actuator provides features to help monitor and manage an application in production. Spring Boot Actuator includes a set of built-in endpoints that allow you to interact with your Spring Boot application, monitor its state, gather metrics, check health, and even modify runtime properties.
Key Features of Spring Boot Actuator:
Health Check: Monitor the status of the application (e.g., UP or DOWN).
Metrics: Track various metrics such as memory usage, CPU, HTTP request counts, and response times.
Auditing: Provides auditing information like user login and access events.
Tracing: Helps track application traces for debugging purposes.
HTTP Endpoints: Actuators expose various endpoints via HTTP to manage and monitor the application.
Common Actuator Endpoints:
/actuator/health: Provides application health information.
/actuator/metrics: Displays various application metrics.
/actuator/info: Displays application information.
/actuator/env: Exposes properties from the environment.
/actuator/loggers: Manage and view logging configuration.
/actuator/httptrace: Provides tracing information for recent HTTP requests.

Aspect-Oriented Programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. In Spring, AOP is used to implement aspects such as logging, transaction management, security, etc., separately from the business logic.

Key Concepts in AOP:
Aspect: A module that encapsulates the behavior affecting multiple classes (cross-cutting concern). In Spring, aspects are implemented using classes annotated with @Aspect.

Join Point: A specific point in the execution of a program, such as the execution of a method or the handling of an exception, where an aspect can be applied.

Advice: The action taken by an aspect at a particular join point. Spring AOP supports different types of advice:

Before: Runs before the method execution.
After: Runs after the method completes.
After Returning: Runs after the method successfully returns a result.
After Throwing: Runs if the method throws an exception.
Around: Runs before and after the method execution.
Pointcut: A predicate that matches join points. A pointcut expression defines at which join points advice should be applied.

Weaving: The process of applying aspects to the target object. In Spring AOP, weaving is performed at runtime using proxies.



Annotations

@Transactional


☀️ Spring and Spring Boot

◯ Introduction to Spring Framework
   ◦ Overview and architecture
   ◦ Inversion of Control (IoC)
   ◦ Dependency Injection (DI)
◯ Spring Beans and Context
   ◦ Bean lifecycle
   ◦ Bean scopes
   ◦ ApplicationContext vs. BeanFactory
◯ Spring Configuration
   ◦ XML configuration
   ◦ Java-based configuration (using @Configuration and @Bean)
   ◦ Annotation-based configuration (using @Component, @Autowired, @Qualifier)
◯ Spring AOP (Aspect-Oriented Programming)
   ◦ AOP concepts
   ◦ Defining aspects, advice, pointcuts, and join points
   ◦ Using @Aspect and @Before, @After, @Around
◯ Spring Data Access
   ◦ JDBC with Spring
   ◦ Spring Data JPA
   ◦ Transaction management
◯ Spring MVC (Model-View-Controller)
   ◦ DispatcherServlet
   ◦ Controllers, models, and views
   ◦ RESTful web services
   ◦ Data binding and form handling
◯ Introduction to Spring Boot
   ◦ Overview and features
   ◦ Spring Boot starters
   ◦ Creating a Spring Boot application
◯ Spring Boot Auto-Configuration
   ◦ Understanding auto-configuration
   ◦ Customizing auto-configuration
◯ Spring Boot Annotations
   ◦ @SpringBootApplication
   ◦ @EnableAutoConfiguration
   ◦ @ConfigurationProperties
◯ Spring Boot Actuator
   ◦ Monitoring and management endpoints
   ◦ Customizing actuator endpoints
   ◦ Health checks and metrics
◯ Spring Boot DevTools
   ◦ LiveReload
   ◦ Automatic restarts
◯ Spring Boot Data
   ◦ Spring Data JPA
   ◦ Working with repositories
◯ Spring Boot Security
   ◦ Integrating Spring Security
   ◦ Secure REST APIs
   ◦ OAuth2 and JWT with Spring Boot
◯ Spring Cloud
   ◦ Microservices architecture
   ◦ Service discovery with Eureka
   ◦ Circuit breaker pattern with Hystrix
   ◦ API Gateway with Spring Cloud Gateway
◯ Spring Batch
   ◦ Batch processing concepts
   ◦ Creating batch jobs
   ◦ Scheduling and execution
◯ Spring Integration
   ◦ Enterprise integration patterns
   ◦ Messaging and channels
   ◦ Transformers and routers
◯ Build Tools
   ◦ Maven
   ◦ Gradle
