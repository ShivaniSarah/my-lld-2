The SOLID principles are a set of five design principles in software engineering aimed at making systems easier to understand, develop, and maintain.
They were introduced by Robert C. Martin (Uncle Bob) as guidelines for building robust, scalable, and reusable object-oriented systems. Here's a brief overview:

1. Single Responsibility Principle (SRP)
Definition: A class should have one, and only one, reason to change.
Explanation: Each class should only handle a single responsibility or function. If a class has more than one responsibility,
changes in one part might inadvertently affect other parts.
Example:
class InvoicePrinter {
    void printInvoice(Invoice invoice) {
        // Handles printing logic
    }
}
class InvoiceSaver {
    void saveInvoice(Invoice invoice) {
        // Handles persistence logic
    }
}

2. Open/Closed Principle (OCP)
Definition: Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
Explanation: You should be able to add new functionality without changing existing code, which helps prevent breaking existing functionality.
Example:
interface Shape {
    double calculateArea();
}
class Circle implements Shape {
    double radius;
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}
class Rectangle implements Shape {
    double width, height;
    public double calculateArea() {
        return width * height;
    }
}
class AreaCalculator {
    double calculateTotalArea(List<Shape> shapes) {
        return shapes.stream().mapToDouble(Shape::calculateArea).sum();
    }
}
3. Liskov Substitution Principle (LSP)
Definition: Subtypes must be substitutable for their base types without altering the correctness of the program.
Explanation: A derived class should enhance functionality, not break it. Any instance of the base class should be replaceable by an instance of the derived class.
Example:
class Bird {
    void fly() {
        System.out.println("I can fly");
    }
}
class Penguin extends Bird {
    @Override
    void fly() {
        throw new UnsupportedOperationException("Penguins cannot fly");
    }
}
// Violates LSP; better to design `Bird` with flying capability as optional.
4. Interface Segregation Principle (ISP)
Definition: Clients should not be forced to depend on interfaces they do not use.
Explanation: Split large interfaces into smaller, more specific ones so that classes implement only the methods relevant to them.
Example:
interface Printer {
    void printDocument();
}
interface Scanner {
    void scanDocument();
}
class MultiFunctionPrinter implements Printer, Scanner {
    public void printDocument() {
        // Implementation
    }
    public void scanDocument() {
        // Implementation
    }
}
class SimplePrinter implements Printer {
    public void printDocument() {
        // Implementation
    }
}
5. Dependency Inversion Principle (DIP)
Definition: High-level modules should not depend on low-level modules. Both should depend on abstractions.
Explanation: Depend on abstractions (interfaces) rather than concrete implementations, allowing for more flexibility and easier testing.
Example:
interface NotificationService {
    void sendNotification(String message);
}
class EmailService implements NotificationService {
    public void sendNotification(String message) {
        System.out.println("Email sent: " + message);
    }
}
class NotificationSender {
    private final NotificationService service;
    NotificationSender(NotificationService service) {
        this.service = service;
    }
    void notifyUser(String message) {
        service.sendNotification(message);
    }
}
// Flexible: Change EmailService to SMSService without modifying NotificationSender
By following these principles, you can create systems that are modular, easy to maintain, and adaptable to future changes and scalable systems

