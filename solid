The SOLID principles are five key object-oriented design principles that help make code more maintainable, scalable, and testable. Let's break down each principle with a simple Java example.



üß± S - Single Responsibility Principle (SRP)


A class should have only one reason to change ‚Äî one responsibility.

‚ùå Bad:

class Report {
    public String generateReport() { return "Report content"; }
    public void saveToFile(String content) { /* File I/O code */ }
}

‚úÖ Good:

class Report {
    public String generateReport() { return "Report content"; }
}

class ReportSaver {
    public void saveToFile(String content) { /* File I/O code */ }
}

üîç Why?
Now, if saving logic changes, you modify ReportSaver only.




üß± O - Open/Closed Principle (OCP)


Classes should be open for extension, but closed for modification.

‚ùå Bad:

class Discount {
    public double getDiscount(String type) {
        if (type.equals("VIP")) return 0.2;
        if (type.equals("Regular")) return 0.1;
        return 0;
    }
}
‚úÖ Good (use polymorphism):

interface DiscountStrategy {
    double getDiscount();
}

class VIPDiscount implements DiscountStrategy {
    public double getDiscount() { return 0.2; }
}

class RegularDiscount implements DiscountStrategy {
    public double getDiscount() { return 0.1; }
}

class DiscountContext {
    public double applyDiscount(DiscountStrategy strategy) {
        return strategy.getDiscount();
    }
}

üîç Why?

Add new discount types without modifying existing logic.

üß± L - Liskov Substitution Principle (LSP)
Subclasses must be substitutable for their base class without breaking functionality.

‚ùå Bad:

class Bird {
    public void fly() {}
}

class Ostrich extends Bird {
    public void fly() {
        throw new UnsupportedOperationException("Ostriches can't fly");
    }
}

‚úÖ Good:

interface Bird {}
interface FlyingBird extends Bird {
    void fly();
}

class Sparrow implements FlyingBird {
    public void fly() {}
}

class Ostrich implements Bird {}

üîç Why?

Now you don‚Äôt force non-flying birds to implement fly().


üìò Definition (Plain English)

If class B is a subclass of class A, you should be able to use B anywhere you use A without changing the correctness or expected behavior of the program.

In other words:

A subclass should honor the contract of its superclass.

It shouldn't remove behavior, throw unexpected exceptions, or violate assumptions made by users of the base class.

üö´ Bad Example ‚Äì Violating LSP

class Bird {
    void fly() {
        System.out.println("Bird is flying");
    }
}

class Ostrich extends Bird {
    @Override
    void fly() {
        throw new UnsupportedOperationException("Ostriches can't fly");
    }
}

‚ùå Problem:

The superclass Bird promises that all birds can fly().

But Ostrich breaks that contract by throwing an exception.

So, if your code uses a Bird and gets an Ostrich, it crashes.


void makeBirdFly(Bird b) {
    b.fly();  // Expect all Birds to fly, but Ostrich will throw
}

makeBirdFly(new Ostrich()); // BOOM ‚ùå

This is a violation of LSP because substituting the subclass breaks the program.

‚úÖ Correct Example ‚Äì Respecting LSP

üëá Fix using better abstraction:

interface Bird {}

interface FlyingBird extends Bird {
    void fly();
}

class Sparrow implements FlyingBird {
    public void fly() {
        System.out.println("Sparrow is flying");
    }
}

class Ostrich implements Bird {
    // Ostrich doesn't implement fly(), which is correct
}

Now:

You pass only FlyingBird where flying is expected

You don't expect Ostrich to fly, so no surprises

void makeBirdFly(FlyingBird b) {
    b.fly();
}

makeBirdFly(new Sparrow());  // ‚úÖ OK
// makeBirdFly(new Ostrich());  // ‚ùå Compile-time error ‚Äî good!

üß† Key Takeaways

‚úÖ Subclasses should:

Honor expectations of the base class

Not override methods in a way that breaks base behavior

Not throw exceptions or reduce functionality arbitrarily

‚ùå Avoid if:

Subclass removes a feature the base class guarantees

Subclass adds conditions or side-effects that are not present in base class

‚úÖ Real-World Analogy

Base Class: Vehicle

Method: startEngine()

If someone passes a Car, Truck, or Bike, they expect startEngine() to work.

But if a subclass like Bicycle overrides startEngine() to throw an exception:

It violates the user's trust that all Vehicles can start engines.

Hence, Bicycle should not extend Vehicle.




üß± I - Interface Segregation Principle (ISP)


Don‚Äôt force a class to implement interfaces it doesn‚Äôt use.

‚ùå Bad:

interface Animal {
    void fly();
    void run();
}

class Dog implements Animal {
    public void fly() {} // meaningless
    public void run() {}
}

‚úÖ Good:

interface RunnableAnimal {
    void run();
}

interface FlyableAnimal {
    void fly();
}

class Dog implements RunnableAnimal {
    public void run() {}
}

üîç Why?

Cleaner, more relevant interfaces for different classes.




üß± D - Dependency Inversion Principle (DIP)




High-level modules should not depend on low-level modules. Both should depend on abstractions.

‚ùå Bad:

class MySQLDatabase {
    public void connect() {}
}

class App {
    MySQLDatabase db = new MySQLDatabase();
    public void start() { db.connect(); }
}

‚úÖ Good:

interface Database {
    void connect();
}

class MySQLDatabase implements Database {
    public void connect() {}
}

class App {
    private Database db;
    public App(Database db) { this.db = db; }
    public void start() { db.connect(); }
}

üîç Why?

You can now inject any database (e.g., Oracle, MongoDB) ‚Üí makes unit testing and swapping easier.



| Principle | Goal                                      | Key Concept                          |
| --------- | ----------------------------------------- | ------------------------------------ |
| SRP       | One responsibility per class              | Separation of concerns               |
| OCP       | Easy to extend without modifying existing | Use inheritance, interfaces          |
| LSP       | Subtypes must behave like base types      | Follow behavioral contracts          |
| ISP       | No fat interfaces                         | Split interfaces based on purpose    |
| DIP       | Depend on abstractions, not concretions   | Inversion of control, use interfaces |





or







The SOLID principles are a set of five design principles in software engineering aimed at making systems easier to understand, 
develop, and maintain.
They were introduced by Robert C. Martin (Uncle Bob) as guidelines for building robust, scalable, and reusable object-oriented systems. 
Here's a brief overview:

1. Single Responsibility Principle (SRP)
Definition: A class should have one, and only one, reason to change.
Explanation: Each class should only handle a single responsibility or function. If a class has more than one responsibility,
changes in one part might inadvertently affect other parts.
Example:
class InvoicePrinter {
    void printInvoice(Invoice invoice) {
        // Handles printing logic
    }
}
class InvoiceSaver {
    void saveInvoice(Invoice invoice) {
        // Handles persistence logic
    }
}

2. Open/Closed Principle (OCP)
Definition: Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
Explanation: You should be able to add new functionality without changing existing code, which helps prevent breaking existing
functionality.
Example:
interface Shape {
    double calculateArea();
}
class Circle implements Shape {
    double radius;
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}
class Rectangle implements Shape {
    double width, height;
    public double calculateArea() {
        return width * height;
    }
}
class AreaCalculator {
    double calculateTotalArea(List<Shape> shapes) {
        return shapes.stream().mapToDouble(Shape::calculateArea).sum();
    }
}
3. Liskov Substitution Principle (LSP)
Definition: Subtypes must be substitutable for their base types without altering the correctness of the program.
Explanation: A derived class should enhance functionality, not break it. 
Any instance of the base class should be replaceable by an instance of the derived class.
Example:
class Bird {
    void fly() {
        System.out.println("I can fly");
    }
}
class Penguin extends Bird {
    @Override
    void fly() {
        throw new UnsupportedOperationException("Penguins cannot fly");
    }
}
// Violates LSP; better to design `Bird` with flying capability as optional.
4. Interface Segregation Principle (ISP)
Definition: Clients should not be forced to depend on interfaces they do not use.
Explanation: Split large interfaces into smaller, more specific ones so that classes implement only the methods relevant to them.
Example:
interface Printer {
    void printDocument();
}
interface Scanner {
    void scanDocument();
}
class MultiFunctionPrinter implements Printer, Scanner {
    public void printDocument() {
        // Implementation
    }
    public void scanDocument() {
        // Implementation
    }
}
class SimplePrinter implements Printer {
    public void printDocument() {
        // Implementation
    }
}
5. Dependency Inversion Principle (DIP)
Definition: High-level modules should not depend on low-level modules. Both should depend on abstractions.
Explanation: Depend on abstractions (interfaces) rather than concrete implementations, allowing for more flexibility and easier testing.
Example:
interface NotificationService {
    void sendNotification(String message);
}
class EmailService implements NotificationService {
    public void sendNotification(String message) {
        System.out.println("Email sent: " + message);
    }
}
class NotificationSender {
    private final NotificationService service;
    NotificationSender(NotificationService service) {
        this.service = service;
    }
    void notifyUser(String message) {
        service.sendNotification(message);
    }
}
// Flexible: Change EmailService to SMSService without modifying NotificationSender
By following these principles, you can create systems that are modular, easy to maintain, and adaptable to future changes and scalable systems

