// The "abstraction" defines the interface for the "control" part of the two class hierarchies.
class RemoteControl {
    protected Device device;

    public RemoteControl(Device device) {
        this.device = device;
    }

    public void togglePower() {
        if (device.isEnabled()) {
            device.disable();
        } else {
            device.enable();
        }
    }

    public void volumeDown() {
        device.setVolume(device.getVolume() - 10);
    }

    public void volumeUp() {
        device.setVolume(device.getVolume() + 10);
    }

    public void channelDown() {
        device.setChannel(device.getChannel() - 1);
    }

    public void channelUp() {
        device.setChannel(device.getChannel() + 1);
    }
}

// Extended abstraction with additional functionality.
class AdvancedRemoteControl extends RemoteControl {

    public AdvancedRemoteControl(Device device) {
        super(device);
    }

    public void mute() {
        device.setVolume(0);
    }
}

// The "implementation" interface declares methods common to all concrete implementation classes.
interface Device {
    boolean isEnabled();
    void enable();
    void disable();
    int getVolume();
    void setVolume(int percent);
    int getChannel();
    void setChannel(int channel);
}

// Concrete implementation for TV.
class Tv implements Device {
    private boolean on = false;
    private int volume = 30;
    private int channel = 1;

    @Override
    public boolean isEnabled() {
        return on;
    }

    @Override
    public void enable() {
        on = true;
        System.out.println("TV is now ON.");
    }

    @Override
    public void disable() {
        on = false;
        System.out.println("TV is now OFF.");
    }

    @Override
    public int getVolume() {
        return volume;
    }

    @Override
    public void setVolume(int percent) {
        volume = percent;
        System.out.println("TV volume set to " + volume + "%.");
    }

    @Override
    public int getChannel() {
        return channel;
    }

    @Override
    public void setChannel(int channel) {
        this.channel = channel;
        System.out.println("TV channel set to " + channel + ".");
    }
}

// Concrete implementation for Radio.
class Radio implements Device {
    private boolean on = false;
    private int volume = 50;
    private int channel = 100;

    @Override
    public boolean isEnabled() {
        return on;
    }

    @Override
    public void enable() {
        on = true;
        System.out.println("Radio is now ON.");
    }

    @Override
    public void disable() {
        on = false;
        System.out.println("Radio is now OFF.");
    }

    @Override
    public int getVolume() {
        return volume;
    }

    @Override
    public void setVolume(int percent) {
        volume = percent;
        System.out.println("Radio volume set to " + volume + "%.");
    }

    @Override
    public int getChannel() {
        return channel;
    }

    @Override
    public void setChannel(int channel) {
        this.channel = channel;
        System.out.println("Radio channel set to " + channel + ".");
    }
}

// Client code
public class Main {
    public static void main(String[] args) {
        Device tv = new Tv();
        RemoteControl tvRemote = new RemoteControl(tv);

        // Control the TV using the RemoteControl
        tvRemote.togglePower();
        tvRemote.volumeUp();
        tvRemote.channelUp();
        tvRemote.togglePower();

        System.out.println("\n");

        Device radio = new Radio();
        AdvancedRemoteControl radioRemote = new AdvancedRemoteControl(radio);

        // Control the Radio using the AdvancedRemoteControl
        radioRemote.togglePower();
        radioRemote.volumeDown();
        radioRemote.mute();
        radioRemote.togglePower();
    }
}
// output

TV is now ON.
TV volume set to 40.
TV channel set to 2.
TV is now OFF.

Radio is now ON.
Radio volume set to 40.
Muting the device.
Radio volume set to 0.
Radio is now OFF.
