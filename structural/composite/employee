// Component interface
interface Employee {
    void showDetails();
}

// Leaf class
class Developer implements Employee {
    private String name;
    private String position;

    public Developer(String name, String position) {
        this.name = name;
        this.position = position;
    }

    @Override
    public void showDetails() {
        System.out.println("Developer: " + name + ", Position: " + position);
    }
}

// Leaf class
class Designer implements Employee {
    private String name;
    private String position;

    public Designer(String name, String position) {
        this.name = name;
        this.position = position;
    }

    @Override
    public void showDetails() {
        System.out.println("Designer: " + name + ", Position: " + position);
    }
}

// Composite class
class Manager implements Employee {
    private String name;
    private String position;
    private List<Employee> subordinates = new ArrayList<>();

    public Manager(String name, String position) {
        this.name = name;
        this.position = position;
    }

    public void addSubordinate(Employee employee) {
        subordinates.add(employee);
    }

    public void removeSubordinate(Employee employee) {
        subordinates.remove(employee);
    }

    @Override
    public void showDetails() {
        System.out.println("Manager: " + name + ", Position: " + position);
        for (Employee employee : subordinates) {
            employee.showDetails();
        }
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        // Leaf nodes
        Employee dev1 = new Developer("John", "Frontend Developer");
        Employee dev2 = new Developer("Jane", "Backend Developer");
        Employee designer = new Designer("Alice", "UI/UX Designer");

        // Composite node
        Manager manager = new Manager("Tom", "Project Manager");
        manager.addSubordinate(dev1);
        manager.addSubordinate(dev2);
        manager.addSubordinate(designer);

        // Display manager and their subordinates
        manager.showDetails();
    }
}
